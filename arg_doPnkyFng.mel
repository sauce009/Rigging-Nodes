global proc string arg_doPnkyFng(string $lPnkyFng[], string $rPnkyFng[])
{
	
	string $lib[] = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};
	$lPnkyFng = `ls ("l_fngPnky_J?_JNT")`;	
	$rPnkyFng = `ls ("r_fngPnky_J?_JNT")`;
	
	for($i=0; $i<size($lPnkyFng); $i++)
	{
		select -r $lPnkyFng[$i];
		arg_circle;
		parentConstraint -mo ("l_fngPnky_J" + $lib[$i] + "_Con_GRP") ($lPnkyFng[$i]);
	}

	for($i=0; $i<size($rPnkyFng); $i++)
	{
		select -r $rPnkyFng[$i];
		arg_circle;
		parentConstraint -mo ("r_fngPnky_J" + $lib[$i] + "_Con_GRP") ($rPnkyFng[$i]);
	}	
	
	string $lPnkyConGrp[] = `ls ("l_fngPnky_J?_Con_GRP")`;
	string $lPnkyOffGrp[] = `ls ("l_fngPnky_J?_Offset_GRP")`;
	string $rPnkyConGrp[] = `ls ("r_fngPnky_J?_Con_GRP")`;
	string $rPnkyOffGrp[] = `ls ("r_fngPnky_J?_Offset_GRP")`;
	for ($i=0; $i<(size($lPnkyConGrp)-1); $i++)
    {
        parentConstraint -mo $lPnkyConGrp[$i] $lPnkyOffGrp[$i+1];
        parentConstraint -mo $rPnkyConGrp[$i] $rPnkyOffGrp[$i+1];
    }
    
	for ($i=0; $i<(size($rPnkyConGrp)-1); $i++)
    {
        parentConstraint -mo $rPnkyConGrp[$i] $rPnkyOffGrp[$i+1];
        parentConstraint -mo $rPnkyConGrp[$i] $rPnkyOffGrp[$i+1];
    }
    
    ////////// << IK >> //////////
	string $side[] = {"l","r"};
	string $ik[];
	string $rev[];
	string $sj[] = {"l_fngPnky_JA_JNT","r_fngPnky_JA_JNT"};
	string $ee[] = {"l_fngPnky_JEnd_JNT","r_fngPnky_JEnd_JNT"};
	for($i=0; $i<size($side); $i++)
		{
			$ik = `ikHandle -n ($side[$i] + "_pnkyFng_IK") -sj $sj[$i] -ee $ee[$i]`;
			$rev[$i] = `createNode reverse -n($side[$i] + "_pnkyFng_REV")`;
		}
		
		
		
	for($i=0; $i<size($side); $i++)
		{
			string $pnkyConA = "_fngPnky_J";
			string $pnkyConB = "_JNT_parentConstraint1";
			string $pnkyConAttrA = ("_fngPnky_J");
			string $pnkyConAttrB = "_Con_GRPW0";
			string $ikHandle = "_pnkyFng_IK";
			for($i=0; $i<size($lPnkyFng); $i++)
			{
				arg_setDrivenKeyframe(($side[0] + $ikHandle), {"ikBlend"}, {(0)}, {(1)}, ($side[0] + $pnkyConA + $lib[$i] + $pnkyConB), {($side[0] + $pnkyConAttrA + $lib[$i] + $pnkyConAttrB)}, {(1)}, {(0)}, "linear");
				arg_setDrivenKeyframe(($side[1] + $ikHandle), {"ikBlend"}, {(0)}, {(1)}, ($side[1] + $pnkyConA + $lib[$i] + $pnkyConB), {($side[1] + $pnkyConAttrA + $lib[$i] + $pnkyConAttrB)}, {(1)}, {(0)}, "linear");
			}
			connectAttr -f ($rev[0] + ".outputX") (($side[0] + $ikHandle) + ".ikBlend");
			connectAttr -f ($rev[1] + ".outputX") (($side[1] + $ikHandle) + ".ikBlend");			
		}
	    
	    for($i=0; $i<size($side); $i++)
	    {
	    	select -r ($side[$i] + "_pnkyFng_IK");
			arg_circle;
			
			select -r ($side[$i] + "_pnkyFng_IK_Offset_GRP");
			searchReplaceNames ("pnkyFng_IK") ("pnkyFng_poleVec") "hierarchy";
	    	string $pole_vecOff[] = `ls ($side[$i] + "_pnkyFng_poleVec_Offset_GRP")`;
			string $pole_vecCon[] = `ls ($side[$i] + "_pnkyFng_poleVec_Con_GRP")`;
			
			float $fngPnkyA_pos[] = `xform -q -ws -t ($side[$i] + "_fngPnky_JA_JNT")`;
			float $fngPnkyB_pos[] = `xform -q -ws -t ($side[$i] + "_fngPnky_JB_JNT")`;
			float $fngPnkyEnd_pos[] = `xform -q -ws -t ($side[$i] + "_fngPnky_JEnd_JNT")`;
			float $pnkyexA_to_pnkyexEnd[] = {($fngPnkyEnd_pos[0]) - ($fngPnkyA_pos[0]),($fngPnkyEnd_pos[1]) - ($fngPnkyA_pos[1]),($fngPnkyEnd_pos[2]) - ($fngPnkyA_pos[2])};
			float $pnkyexA_to_pnkyexEnd_scaled[] = {($pnkyexA_to_pnkyexEnd[0] / 2),($pnkyexA_to_pnkyexEnd[1] / 2),($pnkyexA_to_pnkyexEnd[2] / 2)};
			float $pnky_point[] = {($fngPnkyA_pos[0] + $pnkyexA_to_pnkyexEnd_scaled[0]),($fngPnkyA_pos[1] + $pnkyexA_to_pnkyexEnd_scaled[1]),($fngPnkyA_pos[2] + $pnkyexA_to_pnkyexEnd_scaled[2])};
			float $pnky_point_to_pnkyexB_vec[] = {($fngPnkyB_pos[0] - $pnky_point[0]),($fngPnkyB_pos[1] - $pnky_point[1]),($fngPnkyB_pos[2] - $pnky_point[2])};
			float $pnky_point_to_PnkyB_vec_scaled[] = {($pnky_point_to_pnkyexB_vec[0] * 5),($pnky_point_to_pnkyexB_vec[1] * 5),($pnky_point_to_pnkyexB_vec[2] * 5)};
			float $pnky_point_to_pnkyexB_point[] = {($pnky_point[0] + $pnky_point_to_PnkyB_vec_scaled[0]),($pnky_point[1] + $pnky_point_to_PnkyB_vec_scaled[1]),($pnky_point[2] + $pnky_point_to_PnkyB_vec_scaled[2])};
			
			setAttr -type float3 ($pole_vecOff[$i] + ".translate") $pnky_point_to_pnkyexB_point[0] $pnky_point_to_pnkyexB_point[1] $pnky_point_to_pnkyexB_point[2];
			poleVectorConstraint  ($pole_vecCon) ($side[$i] + "_pnkyFng_IK");
		}
		
		for($i=0; $i<size($side); $i++)
		{
	    	select -r ($side[$i] + "_pnkyFng_IK");
			arg_circle;
			
			parentConstraint -mo ($side[$i] + "_pnkyFng_IK_Con_GRP") ($side[$i] + "_pnkyFng_poleVec_Offset_GRP");
			pointConstraint -mo ($side[$i] + "_pnkyFng_IK_Con_GRP") ($side[$i] + "_pnkyFng_IK");
		}
		
		for($i=0; $i<size($side); $i++)
		{
			string $fngCtrlGrp = `group -em -n($side[$i] + "_fngPnky_GRP")`;
			string $PnkyCtrlGrp = `group -em -n($side[$i] + "_fngPnky_Ctrl_GRP")`;
			string $PnkyPartsGrp = `group -em -n($side[$i] + "_fngPnky_Parts_GRP")`;
			
			parent ($side[$i] + "_fngPnky_J?_Offset_GRP") ($PnkyCtrlGrp);
			parent ($side[$i] + "_pnkyFng_IK_Offset_GRP") ($side[$i] + "_pnkyFng_poleVec_Offset_GRP") ($PnkyCtrlGrp);
			parent ($side[$i] + "_pnkyFng_IK") ($PnkyPartsGrp);
			parent ($PnkyCtrlGrp) ($PnkyPartsGrp) ($fngCtrlGrp);
		}
		
	    return "arg_doPnkyFng";
}