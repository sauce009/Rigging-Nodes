global proc string arg_doIkFkLeg()
{
	string $side[] = {"l","r"};
	string $ctrlGrp;
	string $ik[];
	for($i=0; $i<size($side); $i++)
	{
	string $hipJnt = ($side[$i] + "_hip_JA_JNT");
	string $kneeJnt = ($side[$i] + "_knee_JA_JNT");
	string $footJnt = ($side[$i] + "_foot_JA_JNT");
	
	if (`objExists $hipJnt`)
	{
		$ik = `ikHandle -n ($side[$i] + "_leg_IK") -sj $hipJnt -ee $footJnt`;
		
		arg_arbitaryCtrl({$footJnt},{$side[$i] + "_legIK"},2);
		
		arg_arbitaryCtrl({$kneeJnt},{$side[$i] + "_legPoleVec"},0);

		string $pole_vec = ($side[$i] + "_legPoleVec_Offset_GRP");
		
		float $hip_pos[] = `xform -q -ws -t ($side[$i] + "_hip_JA_JNT")`;
		float $knee_pos[] = `xform -q -ws -t ($side[$i] + "_knee_JA_JNT")`;
		float $foot_pos[] = `xform -q -ws -t ($side[$i] + "_foot_JA_JNT")`;
		float $hip_to_foot[] = {($foot_pos[0]) - ($hip_pos[0]),($foot_pos[1]) - ($hip_pos[1]),($foot_pos[2]) - ($hip_pos[2])};
		float $hip_to_foot_scaled[] = {($hip_to_foot[0] / 2),($hip_to_foot[1] / 2),($hip_to_foot[2] / 2)};
		float $mid_point[] = {($hip_pos[0] + $hip_to_foot_scaled[0]),($hip_pos[1] + $hip_to_foot_scaled[1]),($hip_pos[2] + $hip_to_foot_scaled[2])};
		float $mid_point_to_knee_vec[] = {($knee_pos[0] - $mid_point[0]),($knee_pos[1] - $mid_point[1]),($knee_pos[2] - $mid_point[2])};
		float $mid_point_to_knee_vec_scaled[] = {($mid_point_to_knee_vec[0] * 5),($mid_point_to_knee_vec[1] * 5),($mid_point_to_knee_vec[2] * 5)};
		float $mid_point_to_knee_point[] = {($mid_point[0] + $mid_point_to_knee_vec_scaled[0]),($mid_point[1] + $mid_point_to_knee_vec_scaled[1]),($mid_point[2] + $mid_point_to_knee_vec_scaled[2])};

	
		setAttr -type float3 ($pole_vec + ".translate") $mid_point_to_knee_point[0] $mid_point_to_knee_point[1] $mid_point_to_knee_point[2];
		
		poleVectorConstraint  ($side[$i] + "_legPoleVec_Con_GRP") ($side[$i] + "_leg_IK");
		
		pointConstraint -mo ($side[$i] + "_legIK_Con_GRP") ($ik[0]);
		$ctrlGrp = `group -em -n($side[$i] + "_legControls_GRP")`;
		parent ($side[$i] + "_legIK_Offset_GRP") ($side[$i] + "_legPoleVec_Offset_GRP") ($ctrlGrp);
		$partsGrp = `group -em -n($side[$i] + "_legParts_GRP")`;
		parent ($ik[0]) ($partsGrp);
		$mainGrp = `group -em -n($side[$i] + "_leg_GRP")`;
		parent ($ctrlGrp) ($partsGrp) ($mainGrp);
	}
	
	if (`objExists $hipJnt`)
	{
		arg_arbitaryCtrl({$hipJnt},{$side[$i] + "_hipFk"},2);
		
		arg_arbitaryCtrl({$kneeJnt},{$side[$i] + "_kneeFk"},2);
		
		arg_arbitaryCtrl({$footJnt},{$side[$i] + "_footFk"},2);
		
		parent ($side[$i] + "_hipFk_Offset_GRP") ($side[$i] + "_kneeFk_Offset_GRP") ($side[$i] + "_footFk_Offset_GRP") $ctrlGrp;
		
		parentConstraint -mo ($side[$i] + "_hipFk_Con_GRP") ($side[$i] + "_kneeFk_Offset_GRP");
		parentConstraint -mo ($side[$i] + "_kneeFk_Con_GRP") ($side[$i] + "_footFk_Offset_GRP");
		
		string $rev = `createNode reverse -n($side[$i] + "_leg_REV")`;
		connectAttr -f ($rev + ".outputX") ($ik[0] + ".ikBlend");
	}
	
	}
	
	for($i=0; $i<size($side); $i++)
	{
		arg_setDrivenKeyframe(($side[$i] + "_leg_REV"), {"inputX"}, {(1)}, {(0)}, ($side[$i] + "_hip_JA_JNT_orientConstraint1"), {($side[$i] + "_hipFk_Con_GRPW0")}, {(1)}, {(0)}, "linear");
		arg_setDrivenKeyframe(($side[$i] + "_leg_REV"), {"inputX"}, {(1)}, {(0)}, ($side[$i] + "_knee_JA_JNT_orientConstraint1"), {($side[$i] + "_kneeFk_Con_GRPW0")}, {(1)}, {(0)}, "linear");
		arg_setDrivenKeyframe(($side[$i] + "_leg_REV"), {"inputX"}, {(1)}, {(0)}, ($side[$i] + "_foot_JA_JNT_orientConstraint1"), {($side[$i] + "_footFk_Con_GRPW1")}, {(1)}, {(0)}, "linear");
		arg_setDrivenKeyframe(($side[$i] + "_leg_REV"), {"inputX"}, {(1)}, {(0)}, ($side[$i] + "_foot_JA_JNT_orientConstraint1"), {($side[$i] + "_legIK_Con_GRPW0")}, {(0)}, {(1)}, "linear");
		setAttr ($side[$i] + "_legParts_GRP.visibility") 0;
	}
	
	return "arg_doIkFkLeg";
}